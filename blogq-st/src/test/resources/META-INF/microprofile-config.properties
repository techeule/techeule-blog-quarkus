app.port=51080
app.context=
app.sysApi.context=/q
app.protocolAndHost=http://localhost
quarkus.rest-client."apiResources".url=${app.protocolAndHost}:${app.port}${app.context}/resources
quarkus.rest-client."sysApi".url=${app.protocolAndHost}:${app.port}${app.sysApi.context}
quarkus.rest-client."oidcApi".url=http://t12s-oidc-keycloak:28084/realms/blogq
quarkus.rest-client."healthChecks".url=${app.protocolAndHost}:${app.port}${app.sysApi.context}

# Oidc Credentials
app.clientId=blogq-backend
app.clientSecret=6KAJ72rul4pDlOt7eYwZf3YGprGVxaZj
user.admin.username=blogq-admin@t12s.io
user.admin.password=blogq-admin
user.author.username=blogq-author@t12s.io
user.author.password=blogq-author
user.publisher.username=blogq-publisher@t12s.io
user.publisher.password=blogq-publisher

# https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html#_default_responseexceptionmapper
# Each implementation will provide out of the box a ResponseExceptionMapper implementation that will
# map the response into a WebApplicationException whenever the response status code is >= 400.
# It has a priority of Integer.MAX_VALUE. It is meant to be used as a fallback whenever an automatorError
# is encountered. This mapper will be registered by default to all client interfaces.
# This behavior can be disabled by adding a configuration property
# microprofile.rest.client.disable.default.mapper with value true that will be resolved as a
# boolean via MicroProfile Config.
microprofile.rest.client.disable.default.mapper=true
